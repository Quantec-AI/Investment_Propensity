{"ast":null,"code":"var _jsxFileName = \"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/Graph.js\";\nimport React from 'react';\nimport { ComposedChart, XAxis, YAxis, Tooltip, Legend, CartesianGrid, Area, Line } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Graph(_ref) {\n  let {\n    P,\n    A,\n    Min,\n    Max,\n    Rev\n  } = _ref;\n  const year = [0, 5, 10, 15, 20, 25, 30, 35, 40];\n  console.log(P, A, Min, Max, Rev);\n\n  function cov_Money(Money) {\n    let scaledValue = Money;\n\n    if (scaledValue < 10000) {\n      scaledValue = Math.round(scaledValue / 10) * 10;\n    }\n\n    while (scaledValue >= 10000) {\n      scaledValue /= 10000;\n    }\n\n    return parseInt(scaledValue);\n  }\n\n  function cov_Units(Money) {\n    const units = ['만원', '억원'];\n    let unitIndex = 0;\n\n    while (Money >= 10000 && unitIndex < units.length - 1) {\n      unitIndex += 1;\n      Money /= 10000;\n    }\n\n    return units[unitIndex];\n  }\n\n  const covMoney = cov_Money(P);\n  const covUnits = cov_Units(P); //단리 계산\n\n  function Cal_Simple(t) {\n    const obj = {\n      \"year\": t + '년',\n      \"예상수익범위\": [parseFloat((Min / 100 * covMoney * t + covMoney).toFixed(2)), parseFloat((Max / 100 * covMoney * t + covMoney).toFixed(2))],\n      \"예상수익\": parseFloat((Rev / 100 * covMoney * t + covMoney).toFixed(2))\n    };\n    return obj;\n  } //복리 계산\n\n\n  function Cal_Compound(t) {\n    const obj = {\n      \"year\": t + '년',\n      \"예상수익범위\": [covMoney * ((Min / 100 + 1) ** t).toFixed(2), covMoney * ((Max / 100 + 1) ** t).toFixed(2)],\n      \"예상수익\": covMoney * ((Rev / 100 + 1) ** t).toFixed(2)\n    };\n    console.log(obj);\n    return obj;\n  } //적립식 단리 계산\n  //적립식 복리 계산\n  //데이터 세팅\n\n\n  const data = year.map(function (t) {\n    return Cal_Compound(t);\n  });\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [covMoney, \", \", covUnits]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [Min, \", \", Max, \", \", Rev, \" \", Min / 100 + 1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ComposedChart, {\n      width: 400,\n      height: 250,\n      margin: {\n        top: 20,\n        bottom: 20\n      },\n      data: data,\n      children: [/*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"year\",\n        tick: {\n          fontSize: 10\n        },\n        padding: {\n          right: 20\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        unit: covUnits,\n        tick: {\n          fontSize: 10\n        },\n        padding: {\n          bottom: 10\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {\n        tick: {\n          fontSize: 10\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n        stroke: \"#f4f4f4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Area, {\n        type: \"monotone\",\n        dataKey: \"\\uC608\\uC0C1\\uC218\\uC775\\uBC94\\uC704\",\n        fill: \"#FFB950\",\n        stroke: \"#FFB950\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"\\uC608\\uC0C1\\uC218\\uC775\",\n        stroke: \"#1D1A82\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/Graph.js"],"names":["React","ComposedChart","XAxis","YAxis","Tooltip","Legend","CartesianGrid","Area","Line","Graph","P","A","Min","Max","Rev","year","console","log","cov_Money","Money","scaledValue","Math","round","parseInt","cov_Units","units","unitIndex","length","covMoney","covUnits","Cal_Simple","t","obj","parseFloat","toFixed","Cal_Compound","data","map","top","bottom","fontSize","right"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ComposedChart, XAxis, YAxis, Tooltip, Legend, CartesianGrid, Area, Line } from 'recharts';\n\nfunction Graph({ P, A, Min, Max, Rev }) {\n    const year = [0, 5, 10, 15, 20, 25, 30, 35, 40];\n    console.log(P, A, Min, Max, Rev)\n    function  cov_Money(Money) {\n      \n        let scaledValue = Money;\n          \n        if(scaledValue < 10000) {\n          scaledValue = Math.round(scaledValue/10)*10;\n        }\n\n        while (scaledValue >= 10000) {\n            scaledValue /= 10000;\n        }\n        return parseInt(scaledValue);\n    }\n\n    function  cov_Units(Money) {\n        const units = ['만원', '억원'];\n        let unitIndex = 0;\n\n        while (Money >= 10000 && unitIndex < units.length - 1) {\n            unitIndex += 1;\n            Money /= 10000;\n        }\n        return units[unitIndex];\n    }\n\n    const covMoney = cov_Money(P);\n    const covUnits = cov_Units(P);\n\n    //단리 계산\n    function Cal_Simple(t) {\n        const obj = {\n            \"year\": t+'년',\n            \"예상수익범위\": [parseFloat(((Min/100*covMoney)*(t)+covMoney).toFixed(2)), \n            parseFloat(((Max/100*covMoney)*(t)+covMoney).toFixed(2))],\n            \"예상수익\": parseFloat(((Rev/100*covMoney)*(t)+covMoney).toFixed(2))\n        };\n        return obj;\n    }\n\n    //복리 계산\n    function Cal_Compound(t) {\n        const obj = {\n            \"year\": t+'년',\n            \"예상수익범위\": [(covMoney*((Min/100+1)**(t)).toFixed(2)), \n            (covMoney*((Max/100+1)**(t)).toFixed(2))],\n            \"예상수익\": (covMoney*((Rev/100+1)**(t)).toFixed(2))\n        };\n        console.log(obj);\n        return obj;\n    }\n\n    //적립식 단리 계산\n\n    //적립식 복리 계산\n\n\n    //데이터 세팅\n    const data = year.map(function(t){\n        return Cal_Compound(t);\n    });\n\n    console.log(data);\n\n    return (\n        <div>\n            <p>{covMoney}, {covUnits}</p>\n            <p>{Min}, {Max}, {Rev} {(Min/100+1)}</p>\n            <ComposedChart width={400} height={250} margin={{top: 20, bottom: 20}} data={data}>\n                <XAxis dataKey=\"year\" tick={{fontSize: 10}} padding={{right: 20}}/>\n                <YAxis unit={covUnits} tick={{fontSize: 10}} padding={{bottom: 10}} />\n                <Tooltip />\n                <Legend tick={{fontSize: 10}} />\n                <CartesianGrid stroke=\"#f4f4f4\" />\n                <Area type=\"monotone\" dataKey=\"예상수익범위\" fill=\"#FFB950\" stroke=\"#FFB950\" />\n                <Line type=\"monotone\" dataKey=\"예상수익\" stroke=\"#1D1A82\" />\n            </ComposedChart>\n        </div>\n    );\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}