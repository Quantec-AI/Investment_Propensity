{"ast":null,"code":"var _jsxFileName = \"/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/Graph.js\";\nimport React from 'react';\nimport { ComposedChart, XAxis, YAxis, Tooltip, Legend, CartesianGrid, Area, Line } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Graph(_ref) {\n  let {\n    P,\n    A,\n    Min,\n    Max,\n    Rev\n  } = _ref;\n  const year = [0, 5, 10, 15, 20, 25, 30, 35, 40];\n  console.log(P, A, Min, Max, Rev);\n\n  function valueLabelFormat(Money) {\n    let scaledValue = Money;\n\n    if (scaledValue < 10000) {\n      scaledValue = Math.round(scaledValue / 10) * 10;\n    }\n\n    while (scaledValue >= 10000) {\n      scaledValue /= 10000;\n    }\n\n    return parseInt(scaledValue);\n  }\n\n  function valueFormat(Money) {\n    const units = ['만원', '억원'];\n    let unitIndex = 0;\n\n    while (Money >= 10000 && unitIndex < units.length - 1) {\n      unitIndex += 1;\n      Money /= 10000;\n    }\n\n    return units[unitIndex];\n  }\n\n  const covMoney = valueLabelFormat(Money); //단리 계산\n\n  function Cal_Simple(t) {// return parseFloat(((/100)));\n  } //복리 계산\n\n\n  function Cal_Compound(t) {\n    return;\n  } //\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: P\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/Users/kwonhyunmin/Documents/GitHub/Investment_Propensity/src/component/Graph.js"],"names":["React","ComposedChart","XAxis","YAxis","Tooltip","Legend","CartesianGrid","Area","Line","Graph","P","A","Min","Max","Rev","year","console","log","valueLabelFormat","Money","scaledValue","Math","round","parseInt","valueFormat","units","unitIndex","length","covMoney","Cal_Simple","t","Cal_Compound"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,KAAxB,EAA+BC,KAA/B,EAAsCC,OAAtC,EAA+CC,MAA/C,EAAuDC,aAAvD,EAAsEC,IAAtE,EAA4EC,IAA5E,QAAwF,UAAxF;;;AAEA,SAASC,KAAT,OAAwC;AAAA,MAAzB;AAAEC,IAAAA,CAAF;AAAKC,IAAAA,CAAL;AAAQC,IAAAA,GAAR;AAAaC,IAAAA,GAAb;AAAkBC,IAAAA;AAAlB,GAAyB;AACpC,QAAMC,IAAI,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,EAAe,EAAf,EAAmB,EAAnB,EAAuB,EAAvB,EAA2B,EAA3B,EAA+B,EAA/B,CAAb;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,CAAZ,EAAeC,CAAf,EAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,GAA5B;;AACA,WAASI,gBAAT,CAA0BC,KAA1B,EAAiC;AAE7B,QAAIC,WAAW,GAAGD,KAAlB;;AAEA,QAAGC,WAAW,GAAG,KAAjB,EAAwB;AACtBA,MAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWF,WAAW,GAAC,EAAvB,IAA2B,EAAzC;AACD;;AAED,WAAOA,WAAW,IAAI,KAAtB,EAA6B;AACzBA,MAAAA,WAAW,IAAI,KAAf;AACH;;AACD,WAAOG,QAAQ,CAACH,WAAD,CAAf;AACH;;AAED,WAASI,WAAT,CAAqBL,KAArB,EAA4B;AACxB,UAAMM,KAAK,GAAG,CAAC,IAAD,EAAO,IAAP,CAAd;AACA,QAAIC,SAAS,GAAG,CAAhB;;AAEA,WAAOP,KAAK,IAAI,KAAT,IAAkBO,SAAS,GAAGD,KAAK,CAACE,MAAN,GAAe,CAApD,EAAuD;AACnDD,MAAAA,SAAS,IAAI,CAAb;AACAP,MAAAA,KAAK,IAAI,KAAT;AACH;;AACD,WAAOM,KAAK,CAACC,SAAD,CAAZ;AACH;;AAED,QAAME,QAAQ,GAAGV,gBAAgB,CAACC,KAAD,CAAjC,CA5BoC,CA8BpC;;AACA,WAASU,UAAT,CAAoBC,CAApB,EAAuB,CACnB;AACH,GAjCmC,CAkCpC;;;AACA,WAASC,YAAT,CAAsBD,CAAtB,EAAyB;AACrB;AACH,GArCmC,CAsCpC;;;AAIA,sBACI;AAAA,2BACI;AAAA,gBAAIpB;AAAJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;KA/CQD,K;AAiDT,eAAeA,KAAf","sourcesContent":["import React from 'react';\nimport { ComposedChart, XAxis, YAxis, Tooltip, Legend, CartesianGrid, Area, Line } from 'recharts';\n\nfunction Graph({ P, A, Min, Max, Rev }) {\n    const year = [0, 5, 10, 15, 20, 25, 30, 35, 40];\n    console.log(P, A, Min, Max, Rev)\n    function valueLabelFormat(Money) {\n      \n        let scaledValue = Money;\n          \n        if(scaledValue < 10000) {\n          scaledValue = Math.round(scaledValue/10)*10;\n        }\n\n        while (scaledValue >= 10000) {\n            scaledValue /= 10000;\n        }\n        return parseInt(scaledValue);\n    }\n\n    function valueFormat(Money) {\n        const units = ['만원', '억원'];\n        let unitIndex = 0;\n\n        while (Money >= 10000 && unitIndex < units.length - 1) {\n            unitIndex += 1;\n            Money /= 10000;\n        }\n        return units[unitIndex];\n    }\n\n    const covMoney = valueLabelFormat(Money)\n\n    //단리 계산\n    function Cal_Simple(t) {\n        // return parseFloat(((/100)));\n    }\n    //복리 계산\n    function Cal_Compound(t) {\n        return ;\n    }\n    //\n\n\n\n    return (\n        <div>\n            <p>{P}</p>\n        </div>\n    );\n}\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}